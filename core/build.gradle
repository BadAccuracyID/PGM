/*
 * This file was generated by the Gradle 'init' task.
 */

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'tc.oc.pgm.java-conventions'
}

def code = 0

dependencies {
    annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'

    compileOnly files('depends/sportpaper-1.8.8-R0.1-SNAPSHOT.jar')
    compileOnly files('depends/SuperVanish-6.2.6.jar')

    extraLibs project(':util')

    configurations.compileOnly.extendsFrom(configurations.extraLibs)
}

description = 'Core'

task updateBuildNumber {
    def versionPropsFile = file 'version.properties'
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))

    code = versionProps['VERSION_CODE'].toInteger() + 1

    versionProps['VERSION_CODE'] = code.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
}

def fileTrees = new ArrayList<FileTree>()
task filterDependencies {
    configurations.extraLibs
            .forEach { Object object ->
                {
                    if (object instanceof File) {
                        File file = (File) object
                        if (file.isDirectory()) {
                            return
                        }

                        FileTree fileTree = zipTree(file)
                        fileTree.files.removeIf { File asd ->
                            {
                                def filtered =
                                        (asd.absolutePath.contains("org") && asd.absolutePath.contains("apache")) ||
                                                (asd.absolutePath.contains("org") && asd.absolutePath.contains("bukkit")) ||
                                                (asd.absolutePath.contains("org") && asd.absolutePath.contains("intellij")) ||
                                                (asd.absolutePath.contains("org") && asd.absolutePath.contains("jetbrains")) ||
                                                (asd.absolutePath.contains("org") && asd.absolutePath.contains("json")) ||
                                                (asd.absolutePath.contains("org") && asd.absolutePath.contains("spigotmc")) ||
                                                (asd.absolutePath.contains("org") && asd.absolutePath.contains("hamcrest")) ||
                                                (asd.absolutePath.contains("org") && asd.absolutePath.contains("yaml"))

                                System.out.println(asd.absolutePath + " -> " + filtered)
                                return filtered
                            }
                        }

                        // did not actually add the modified fileTree
                        fileTrees.add(fileTree)
                    }
                }
            }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    archiveFileName = "Lucky-PGM.jar"

    from {
        fileTrees.collect { it }
    }
}

processResources {
    filter ReplaceTokens, tokens: [
            "version": project.version.toString(),
            "number" : code.toString()
    ]
}
//                .filter { File f -> !f.name.startsWith("com.") }
//                .filter { File f -> !f.name.startsWith("javax") }
//                .filter { File f -> !f.name.startsWith("junit") }
//                .filter { File f -> !f.name.startsWith("META-INF") }
//                .filter { File f -> !f.name.startsWith("mojang-translations") }
//                .filter { File f -> !f.name.startsWith("net.md_5") }
//                .filter { File f -> !f.name.startsWith("org.apache") }
//                .filter { File f -> !f.name.startsWith("org.bukkit") }
//                .filter { File f -> !f.name.startsWith("org.hamcrest") }
//                .filter { File f -> !f.name.startsWith("org.intellij") }
//                .filter { File f -> !f.name.startsWith("org.jetbrains") }
//                .filter { File f -> !f.name.startsWith("org.json") }
//                .filter { File f -> !f.name.startsWith("org.junit") }
//                .filter { File f -> !f.name.startsWith("org.spigotmc") }
//                .filter { File f -> !f.name.startsWith("org.yaml") }